---
- name: Check Solidfire service on the node
  delegate_to: "{{ node_ip }}"
  block:
    - name: "Check whether the config file exists on node {{ node_ip }}"
      stat:
        path: /opt/sf
      register: cfg_file

    - name: "Add node {{ node_ip }} to already-uninstalled list if config file is not found"
      set_fact:
        nodes_already_uninstalled: "{{ nodes_already_uninstalled + [ node_ip ] }}"
      when: cfg_file is defined and cfg_file.stat is defined and not cfg_file.stat.exists

    - name: Check solidfire service
      block:
        - name: "Check whether the Solidfire service is up on node {{ node_ip }} when the config file exists"
          shell: systemctl list-units --type=service | grep solidfire.service
          when: cfg_file is defined and cfg_file.stat.exists
          register: sf_status
      rescue:
        - debug:
            msg: "Solidfire.service not found on node {{ node_ip }}"
          when: sf_status.rc != 0

    - name: "Add node {{ node_ip }} to uninstall list if config file exists but Solidfire service is not up"
      set_fact:
        nodes_to_uninstall: "{{ nodes_to_uninstall + [node_ip] }}"
      when:
        - cfg_file is defined and cfg_file.stat is defined and cfg_file.stat.exists
        - sf_status is undefined or sf_status.stdout is undefined or sf_status.stdout is not search('loaded active exited')

- name: Get cluster config info from node
  delegate_to: localhost
  when: >
    sf_status is defined and sf_status.stdout is defined and
    sf_status.stdout is search('loaded active exited')
  block:
    - name: "Get cluster config details from node {{ node_ip }} if Solidfire service is up"
      uri:
        url: "https://{{ node_ip }}:442/json-rpc/{{ sf_api_version }}?method=GetClusterConfig"
        validate_certs: "{{ sf_validate_certs | bool }}"
        url_username: "{{ sf_cluster_admin_username }}"
        url_password: "{{ sf_cluster_admin_passwd }}"
        use_proxy: "{{ sf_use_proxy | bool }}"
        return_content: yes
        status_code: 200
      register: response

    - name: "Record cluster name for node {{ node_ip }}"
      set_fact:
        cluster_names: "{{ cluster_names + [response['json']['result']['cluster']['cluster']] }}"
      when:
        - response.json.result.cluster.cluster != ""
        - response.json.result.cluster.cluster is not in cluster_names

    - name: "Add node {{ node_ip }} to cannot-uninstall list if its nodeID > 0 and uninstalling active cluster is not allowed"
      set_fact:
        nodes_cannot_uninstall: "{{ nodes_cannot_uninstall + [node_ip] }}"
      when:
        - not sf_allow_uninstall_active_cluster
        - response.json.result.cluster.nodeID > 0
        - response.json.result.cluster.nodeID is not in nodes_cannot_uninstall

    - name: "Add node {{ node_ip }} to uninstall list if its nodeID is 0 or uninstall active cluster is allowed"
      set_fact:
        nodes_to_uninstall: "{{ nodes_to_uninstall + [node_ip] }}"
      when:
        - node_ip not in nodes_to_uninstall
        - response.json.result.cluster.nodeID == 0 or sf_allow_uninstall_active_cluster

  rescue:
    - name: Ensure we fail if node API returned unexpected error
      fail:
        msg: "{{ response }}"
      when: >
        not (response.status == -1 and response.msg is defined and response.msg is search('Connection refused'))

    - name: "Add node {{ node_ip }} to uninstall list when the node API failed (Solidfire service went down)"
      set_fact:
        nodes_to_uninstall: "{{ nodes_to_uninstall + [node_ip] }}"
      when: node_ip not in nodes_to_uninstall
